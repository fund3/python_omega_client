from queue import Queue
from typing import List, Union

import zmq

from omega_client.messaging.common_types import AccountCredentials, \
    AccountInfo, AuthorizationRefresh, Batch, OCO, OPO, \
    Order, OrderInfo, OrderType, RequestHeader, TimeInForce
from omega_client.communication.request_sender import RequestSender


class SingleClientRequestSender:
    """
    Wrapper around RequestSender with added boilerplate code support use cases
    with only 1 client_id.
    """
    def __init__(self, zmq_context: zmq.Context,
                 zmq_endpoint: str,
                 client_id: int,
                 sender_comp_id: str,
                 outgoing_message_queue: Queue = None):
        self._request_sender = RequestSender(
            zmq_context=zmq_context,
            zmq_endpoint=zmq_endpoint,
            outgoing_message_queue=outgoing_message_queue)
        self._request_header = RequestHeader(client_id=client_id,
                                             sender_comp_id=sender_comp_id,
                                             access_token='',
                                             request_id=0)
        self.engine = None
        # TODO (low priority) change _request_header to use variable request_id
        # client should override self._request_header in their implementation
        #  and use their own method for generating request_ids

    def set_engine(self, engine):
        self.engine = engine

    def set_sender_comp_id(self, new_sender_comp_id: str):
        """
        Sets the sender_comp_id in self._request_header.
        :param new_sender_comp_id: (str) Sender comp id generated by client.
        """
        self._request_header.sender_comp_id = new_sender_comp_id

    def set_access_token(self, access_token: str):
        """
        Sets the access_token in self._request_header.
        :param access_token: (str) Access token granted by Omega.  Note that
            access_token is ignored in logon.
        """
        self._request_header.access_token = access_token
        self.engine.access_token = access_token

    def start(self):
        self._request_sender.start()

    def stop(self):
        self._request_sender.stop()

    def is_running(self):
        """
        Return True if the RequestSender is running, False otherwise.
        """
        return self._request_sender.is_running()

    def cleanup(self):
        self._request_sender.cleanup()
    """
    ############################################################################

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Outgoing OmegaMessages ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ----------------- Public Methods to be called by client -------------------

    ############################################################################
    """
    def logon(self,
              client_secret: str,
              credentials: List[AccountCredentials]):
        return self._request_sender.logon(
            request_header=self._request_header,
            client_secret=client_secret,
            credentials=credentials)

    def logoff(self):
        return self._request_sender.logoff(request_header=self._request_header)

    def send_test_message(self, test_message: str):
        return self._request_sender.send_test_message(
            request_header=self._request_header, test_message=test_message)

    def send_heartbeat(self):
        return self._request_sender.send_heartbeat(
            request_header=self._request_header)

    def request_server_time(self):
        return self._request_sender.request_server_time(
            request_header=self._request_header)

    def place_order(self, order: Order, request_header: RequestHeader = None):
        if request_header is not None:
            return self._request_sender.place_order(
                request_header=request_header, order=order
            )
        else:
            return self._request_sender.place_order(
                request_header=self._request_header, order=order)

    def place_contingent_order(self, contingent_order: Union[Batch, OPO, OCO],
                               request_header: RequestHeader = None):
        if request_header is not None:
            return self._request_sender.place_contingent_order(
                request_header=request_header,
                contingent_order=contingent_order
            )
        else:
            return self._request_sender.place_contingent_order(
                request_header=self._request_header,
                contingent_order=contingent_order
            )

    def replace_order(self, account_info: AccountInfo,
                      order_id: str,
                      order_type: str=OrderType.market.name,
                      quantity: float = 0.0,
                      price: float = 0.0,
                      stop_price: float = 0.0,
                      time_in_force: str = TimeInForce.gtc.name,
                      expire_at: float = 0.0,
                      request_header: RequestHeader = None):
        if request_header is not None:
            return self._request_sender.replace_order(
                request_header=request_header,
                account_info=account_info,
                order_id=order_id,
                order_type=order_type,
                quantity=quantity,
                price=price,
                stop_price=stop_price,
                time_in_force=time_in_force,
                expire_at=expire_at
            )
        else:
            return self._request_sender.replace_order(
                request_header=self._request_header,
                account_info=account_info,
                order_id=order_id,
                order_type=order_type,
                quantity=quantity,
                price=price,
                stop_price=stop_price,
                time_in_force=time_in_force,
                expire_at=expire_at
            )

    def cancel_order(self, account_info: AccountInfo,
                     order_id: str,
                     request_header: RequestHeader = None):
        if request_header is not None:
            return self._request_sender.cancel_order(
                request_header=request_header,
                account_info=account_info,
                order_id=order_id)
        else:
            return self._request_sender.cancel_order(
                request_header=self._request_header,
                account_info=account_info,
                order_id=order_id)

    def cancel_all_orders(self, account_info: AccountInfo,
                          symbol: str = None,
                          side: str = None,
                          request_header: RequestHeader = None):
        if request_header is not None:
            return self._request_sender.cancel_all_orders(
                request_header=request_header,
                account_info=account_info,
                symbol=symbol,
                side=side)
        else:
            return self._request_sender.cancel_all_orders(
                request_header=self._request_header,
                account_info=account_info,
                symbol=symbol,
                side=side)

    def request_account_data(self, account_info: AccountInfo):
        return self._request_sender.request_account_data(
            request_header=self._request_header, account_info=account_info)

    def request_open_positions(self, account_info: AccountInfo):
        return self._request_sender.request_open_positions(
            request_header=self._request_header, account_info=account_info)

    def request_account_balances(self, account_info: AccountInfo):
        return self._request_sender.request_account_balances(
            request_header=self._request_header, account_info=account_info)

    def request_working_orders(self, account_info: AccountInfo):
        return self._request_sender.request_working_orders(
            request_header=self._request_header, account_info=account_info)

    def request_order_status(self, account_info: AccountInfo,
                             order_id: str):
        return self._request_sender.request_order_status(
            request_header=self._request_header,
            account_info=account_info,
            order_id=order_id)

    def request_completed_orders(self, account_info: AccountInfo,
                                 count: int = None,
                                 since: float = None):
        return self._request_sender.request_completed_orders(
            request_header=self._request_header,
            account_info=account_info,
            count=count,
            since=since)

    def request_exchange_properties(self, exchange: str):
        return self._request_sender.request_exchange_properties(
            request_header=self._request_header, exchange=exchange)

    def request_authorization_refresh(self,
                                      auth_refresh: AuthorizationRefresh):
        return self._request_sender.request_authorization_refresh(
            request_header=self._request_header, auth_refresh=auth_refresh
        )
